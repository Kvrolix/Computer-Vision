%Function to get the measure for the car that is not a fire truck, taking
%the image of the car as the input. Returned values are centers which are
%the X and Y coordinates of detected object and rest of the returned values
%are the X and Y coordinates of the section listed by its names.

function [centers,bottomLineCenters,topLineCenters,topRightCorner,topLeftCorner] = getMeasures(image)

% Gaussian filter
a = 3;
sig = 3;
gaussianFilter = fspecial('gaussian', [a, a], sig);
smoothedImg = imfilter(image, gaussianFilter, 'replicate');

% Grayscale image
imgGray = rgb2gray(smoothedImg);

% Binary image
threshold = 0.15;
imgBinary = imbinarize(imgGray, threshold);

% Invert the binary image
img_inverted = 1 - imgBinary;

% Morphological operations (closing and erosion)
dilationStructEl = strel('square', 70);
closedImg = imclose(img_inverted, dilationStructEl);

erosionStructEl = strel('square', 5);
imgErosion = imerode(closedImg, erosionStructEl);

% Use regionprops to get properties for each region
labeledImage = bwlabel(imgErosion);
stats = regionprops(labeledImage, 'BoundingBox','Area');

% Filter regions based on area
minAreaThreshold = 5;  
selectedRegions = stats([stats.Area] > minAreaThreshold);

% Initialize measurements structure
centers = zeros(numel(selectedRegions), 2);
measurements = struct('BoundingBox', [], 'Width', [], 'Height', [],'Centroid',[]);

% Loop through selected regions and draw bounding boxes
for i = 1:numel(selectedRegions)
    boundingBox = selectedRegions(i).BoundingBox;
   
     % Calculate centroid (ha
        if isfield(selectedRegions(i), 'Centroid')
            centers(i, :) = selectedRegions(i).Centroid;
        else
            centers(i, 1) = boundingBox(1) + boundingBox(3) / 2;
            centers(i, 2) = boundingBox(2) + boundingBox(4) / 2;
        end  
        % Calculate center of the bottom line
        bottomLineCenters(i, 1) = boundingBox(1) + boundingBox(3) / 2;
        bottomLineCenters(i, 2) = boundingBox(2) + boundingBox(4);

        % Calculate center of the top line
        topLineCenters(i, 1) = boundingBox(1) + boundingBox(3) / 2;
        topLineCenters(i, 2) = boundingBox(2);

        % Calculate top right corner
        topRightCorner(i, 1) = boundingBox(1) + boundingBox(3);
        topRightCorner(i, 2) = boundingBox(2);

        % Calculate top left corner
        topLeftCorner(i, 1) = boundingBox(1);
        topLeftCorner(i, 2) = boundingBox(2);
end



